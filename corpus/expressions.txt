===============
Binary Operator
===============

exponent = x ^ y;
mult = x * y;
div = x / y;
idiv = x div y;
add = x + y;
minus = x - y;
set_inter = x intersect y;
set_dotdot = x..y;
set_symdiff = x symdiff y;
set_diff = x diff y;
set_union = x union y;
same = x = y;
samedouble = x == y;
different = x != y;
smaller = x < y;
bigger = x > y;
smalleq = x <= y;
bigeq = x >= y;
set_in = x in y;
set_sub = x subset y;
set_super = x superset y;
and = x /\ y;
bool_xor = x xor y;
or = x \/ y;

---

(source_file
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier)))
  (assignment_item (identifier) (binary_operation (identifier) (identifier))))

====
Call
====

no_args = my_fn();
single_arg = my_fn(1);
mult_args = my_fn(2, "test");

---

(source_file
  (assignment_item (identifier) (call (identifier)))
  (assignment_item (identifier) (call (identifier) (integer_literal)))
  (assignment_item (identifier) (call (identifier) (integer_literal) (string_literal))))

================
If-Then-Else
================

if_only = if b then i < j endif;
value_select = if b then i else j endif;
elseif = if b then i elseif c then j else k endif;
elseif_no_else = if b then i < j elseif c then j > i endif;

---

(source_file
  (assignment_item (identifier) (if_then_else (identifier) (binary_operation (identifier) (identifier))))
  (assignment_item (identifier) (if_then_else (identifier) (identifier) (identifier)))
  (assignment_item (identifier) (if_then_else (identifier) (identifier) (identifier) (identifier) (identifier)))
  (assignment_item (identifier) (if_then_else (identifier) (binary_operation (identifier) (identifier)) (identifier) (binary_operation (identifier) (identifier)))))

================
Index Expression
================

named_colection = my_collection[1];
named_accessor = my_collection[i];
literal_collection = [1,2,3][i];
multiple_accessor = my_collection[i,2];
expression_accessor = my_collection[-i + 2];
slice = my_collection[1..2];

---

(source_file
  (assignment_item (identifier) (index_expression (identifier) (integer_literal)))
  (assignment_item (identifier) (index_expression (identifier) (identifier)))
  (assignment_item (identifier) (index_expression (array_literal (integer_literal) (integer_literal) (integer_literal)) (identifier)))
  (assignment_item (identifier) (index_expression (identifier) (identifier) (integer_literal)))
  (assignment_item (identifier) (index_expression (identifier) (binary_operation (unary_operation (identifier)) (integer_literal))))
  (assignment_item (identifier) (index_expression (identifier) (binary_operation (integer_literal) (integer_literal)))))

==============
Unary Operator
==============

negatitve_number = -5;
negative_ident = -num;

negated_bool = not true;
unicode_negation = Â¬ b;

---

(source_file
  (assignment_item (identifier) (unary_operation (integer_literal)))
  (assignment_item (identifier) (unary_operation (identifier)))
  (assignment_item (identifier) (unary_operation (boolean_literal)))
  (assignment_item (identifier) (unary_operation (identifier))))
