==============
Absent Literal
==============

is_absent = <>;

---

(source_file
  (assignment (identifier) (absent)))

==============
Array Literals
==============

empty = [];
single = [1.0];
double = [1, 2.2];
more = [<>, <>, 1, <>];

---

(source_file
  (assignment (identifier) (array_literal))
  (assignment (identifier) (array_literal (float_literal)))
  (assignment (identifier) (array_literal (integer_literal) (float_literal)))
  (assignment (identifier) (array_literal (absent) (absent) (integer_literal) (absent))))

================
Boolean Literals
================

boolean_id = false;
boolean_id = true;

---

(source_file
  (assignment (identifier) (boolean_literal))
  (assignment (identifier) (boolean_literal)))

===============
Number Literals
===============

simple_float = 3.65;
exponent_float = 4.5e10;
simple_exponent_float = 5E-10;

decimal_integer = 123;
hexadecimal_integer = 0xA23F;
octal_integer = 0o701;
binary_integer = 0b00110101;


---

(source_file
  (assignment (identifier) (float_literal))
  (assignment (identifier) (float_literal))
  (assignment (identifier) (float_literal))
  (assignment (identifier) (integer_literal))
  (assignment (identifier) (integer_literal))
  (assignment (identifier) (integer_literal))
  (assignment (identifier) (integer_literal)))

============
Set Literals
============

empty = {};
single = {1.0};
double = {1, 2.2};
more = {<>, <>, 1, <>};

---

(source_file
  (assignment (identifier) (set_literal))
  (assignment (identifier) (set_literal (float_literal)))
  (assignment (identifier) (set_literal (integer_literal) (float_literal)))
  (assignment (identifier) (set_literal (absent) (absent) (integer_literal) (absent))))

===============
String Literals
===============

empty_string = "";
small_string = "test";
spaced_string = "    Another test    ";
escaped_string = "\t\n";

---

(source_file
  (assignment (identifier) (string_literal))
  (assignment (identifier) (string_literal))
  (assignment (identifier) (string_literal))
  (assignment (identifier) (string_literal (escape_sequence) (escape_sequence))))
